version: '3.7'

services:

  webapp:
    restart: always
    build: ./webapp
    depends_on:
      - postgres
      - redis
    volumes:
      - webapp-data:/srv/webapp
      - static-data:/srv/webapp/static
    env_file: docker-environ
    command: /usr/local/bin/gunicorn app.wsgi:application -w 2 -b :8000 --capture-output --enable-stdio-inheritance --log-file - --access-logfile - --error-logfile - --log-level debug --chdir /srv/webapp --reload

  scheduler:
    restart: always
    build: ./webapp
    depends_on:
      - webapp
    volumes:
      - webapp-data:/srv/webapp
      - tmp-data:/tmp/scheduler
    env_file: docker-environ
    command: celery -A app beat --scheduler django_celery_beat.schedulers:DatabaseScheduler --pidfile=/tmp/scheduler/celerybeat.pid -l info

  worker_fetching:
    restart: always
    build: ./webapp
    depends_on:
      - scheduler
    volumes:
      - webapp-data:/srv/webapp
    env_file: docker-environ
    command: celery -A app worker -l info -Q fetching

  worker_scoring:
    restart: always
    build: ./webapp
    depends_on:
      - scheduler
    volumes:
      - webapp-data:/srv/webapp
    env_file: docker-environ
    command: celery -A app worker -l info -Q scoring

  http:
    restart: always
    image: nginx
    depends_on:
      - webapp
    ports:
      - "80:80"
    volumes:
      - static-data:/www/static
      - ./http/conf.d:/etc/nginx/conf.d

  postgres:
    restart: always
    image: postgres
    command: postgres
      -c checkpoint_completion_target=${PG_CHECKPOINT_COMPLETION_TARGET}
      -c default_statistics_target=${PG_DEFAULT_STATISTICS_TARGET}
      -c effective_cache_size=${PG_EFFECTIVE_CACHE_SIZE}
      -c effective_io_concurrency=${PG_EFFECTIVE_IO_CONCURRENCY}
      -c log_min_duration_statement=${PG_LOG_MIN_DURATION_STATEMENT}
      -c maintenance_work_mem=${PG_MAINTENANCE_WORK_MEM}
      -c max_connections=${PG_MAX_CONNECTIONS}
      -c max_parallel_maintenance_workers=${PG_MAX_PARALLEL_MAINTENANCE_WORKERS}
      -c max_parallel_workers=${PG_MAX_PARALLEL_WORKERS}
      -c max_parallel_workers_per_gather=${PG_MAX_PARALLEL_WORKERS_PER_GATHER}
      -c max_wal_size=${PG_MAX_WAL_SIZE}
      -c max_worker_processes=${PG_MAX_WORKER_PROCESSES}
      -c min_wal_size=${PG_MIN_WAL_SIZE}
      -c random_page_cost=${PG_RANDOM_PAGE_COST}
      -c shared_buffers=${PG_SHARED_BUFFERS}
      -c wal_buffers=${PG_WAL_BUFFERS}
      -c work_mem=${PG_WORK_MEM}
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    env_file: docker-environ

  redis:
    restart: always
    image: redis
    volumes:
      - redis-data:/data
    env_file: docker-environ

volumes:
  postgres-data:
  redis-data:
  webapp-data:
  static-data:
  tmp-data:
    driver_opts:
      type: tmpfs
      device: tmpfs
